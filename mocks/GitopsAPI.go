// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	codefresh "github.com/codefresh-io/go-sdk/pkg/codefresh"
	mock "github.com/stretchr/testify/mock"
)

// GitopsAPI is an autogenerated mock type for the GitopsAPI type
type GitopsAPI struct {
	mock.Mock
}

// CreateEnvironment provides a mock function with given fields: name, project, application, integration
func (_m *GitopsAPI) CreateEnvironment(name string, project string, application string, integration string) error {
	ret := _m.Called(name, project, application, integration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(name, project, application, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEnvironment provides a mock function with given fields: name
func (_m *GitopsAPI) DeleteEnvironment(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEnvironments provides a mock function with given fields:
func (_m *GitopsAPI) GetEnvironments() ([]codefresh.CFEnvironment, error) {
	ret := _m.Called()

	var r0 []codefresh.CFEnvironment
	if rf, ok := ret.Get(0).(func() []codefresh.CFEnvironment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]codefresh.CFEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendApplicationResources provides a mock function with given fields: resources
func (_m *GitopsAPI) SendApplicationResources(resources *codefresh.ApplicationResources) error {
	ret := _m.Called(resources)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codefresh.ApplicationResources) error); ok {
		r0 = rf(resources)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEnvironment provides a mock function with given fields: environment
func (_m *GitopsAPI) SendEnvironment(environment codefresh.Environment) (map[string]interface{}, error) {
	ret := _m.Called(environment)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(codefresh.Environment) map[string]interface{}); ok {
		r0 = rf(environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(codefresh.Environment) error); ok {
		r1 = rf(environment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEvent provides a mock function with given fields: name, props
func (_m *GitopsAPI) SendEvent(name string, props map[string]string) error {
	ret := _m.Called(name, props)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(name, props)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	codefresh "github.com/codefresh-io/go-sdk/pkg/codefresh"
	mock "github.com/stretchr/testify/mock"
)

// IContextAPI is an autogenerated mock type for the IContextAPI type
type IContextAPI struct {
	mock.Mock
}

// GetDefaultGitContext provides a mock function with given fields:
func (_m *IContextAPI) GetDefaultGitContext() (error, *codefresh.ContextPayload) {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	var r1 *codefresh.ContextPayload
	if rf, ok := ret.Get(1).(func() *codefresh.ContextPayload); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codefresh.ContextPayload)
		}
	}

	return r0, r1
}

// GetGitContextByName provides a mock function with given fields: name
func (_m *IContextAPI) GetGitContextByName(name string) (error, *codefresh.ContextPayload) {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	var r1 *codefresh.ContextPayload
	if rf, ok := ret.Get(1).(func(string) *codefresh.ContextPayload); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codefresh.ContextPayload)
		}
	}

	return r0, r1
}

// GetGitContexts provides a mock function with given fields:
func (_m *IContextAPI) GetGitContexts() (error, *[]codefresh.ContextPayload) {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	var r1 *[]codefresh.ContextPayload
	if rf, ok := ret.Get(1).(func() *[]codefresh.ContextPayload); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]codefresh.ContextPayload)
		}
	}

	return r0, r1
}

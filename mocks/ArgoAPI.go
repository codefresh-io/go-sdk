// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	codefresh "github.com/codefresh-io/go-sdk/pkg/codefresh"
	mock "github.com/stretchr/testify/mock"
)

// ArgoAPI is an autogenerated mock type for the ArgoAPI type
type ArgoAPI struct {
	mock.Mock
}

// CreateIntegration provides a mock function with given fields: integration
func (_m *ArgoAPI) CreateIntegration(integration codefresh.IntegrationPayloadData) error {
	ret := _m.Called(integration)

	var r0 error
	if rf, ok := ret.Get(0).(func(codefresh.IntegrationPayloadData) error); ok {
		r0 = rf(integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIntegrationByName provides a mock function with given fields: name
func (_m *ArgoAPI) DeleteIntegrationByName(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIntegrationByName provides a mock function with given fields: name
func (_m *ArgoAPI) GetIntegrationByName(name string) (*codefresh.IntegrationPayload, error) {
	ret := _m.Called(name)

	var r0 *codefresh.IntegrationPayload
	if rf, ok := ret.Get(0).(func(string) *codefresh.IntegrationPayload); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codefresh.IntegrationPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrations provides a mock function with given fields:
func (_m *ArgoAPI) GetIntegrations() ([]*codefresh.IntegrationPayload, error) {
	ret := _m.Called()

	var r0 []*codefresh.IntegrationPayload
	if rf, ok := ret.Get(0).(func() []*codefresh.IntegrationPayload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*codefresh.IntegrationPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeartBeat provides a mock function with given fields: error, version, integration
func (_m *ArgoAPI) HeartBeat(error string, version string, integration string) error {
	ret := _m.Called(error, version, integration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(error, version, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendResources provides a mock function with given fields: kind, items, amount, integration
func (_m *ArgoAPI) SendResources(kind string, items interface{}, amount int, integration string) error {
	ret := _m.Called(kind, items, amount, integration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, int, string) error); ok {
		r0 = rf(kind, items, amount, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIntegration provides a mock function with given fields: name, integration
func (_m *ArgoAPI) UpdateIntegration(name string, integration codefresh.IntegrationPayloadData) error {
	ret := _m.Called(name, integration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, codefresh.IntegrationPayloadData) error); ok {
		r0 = rf(name, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

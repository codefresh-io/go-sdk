// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// AbacAllActionsValidatedEntity
type AbacAllActionsValidatedEntityAction struct {
	Action  AbacActionNames `json:"action"`
	Enabled bool            `json:"enabled"`
}

// AbacAllActionsValidationResult
type AbacAllActionsValidationResult struct {
	Entity           string                                 `json:"entity"`
	ValidationResult []*AbacAllActionsValidatedEntityAction `json:"validationResult"`
}

// AbacAttribute
type AbacAttribute struct {
	// Name
	Name AbacAttributeNames `json:"name"`
	// Key
	Key *string `json:"key,omitempty"`
	// Value
	Value string `json:"value"`
}

// AbacAttributeInput
type AbacAttributeInput struct {
	// Name
	Name string `json:"name"`
	// Key
	Key *string `json:"key,omitempty"`
	// Value
	Value string `json:"value"`
}

// AbacRulesFilterArgs
type AbacRulesFilterArgs struct {
	// Filter by entity types
	Type *AbacEntityValues `json:"type,omitempty"`
}

// AbacValidationResult
type AbacValidationResult struct {
	IsValid bool    `json:"isValid"`
	Message *string `json:"message,omitempty"`
}

// CreateRuleInput
type CreateAbacRuleInput struct {
	// EntityType
	EntityType AbacEntityValues `json:"entityType"`
	// Teams
	Teams []string `json:"teams"`
	// Actions
	Actions []string `json:"actions"`
	// Tags
	Tags []*string `json:"tags,omitempty"`
	// Attributes
	Attributes []*AbacAttributeInput `json:"attributes,omitempty"`
}

// EntityAbacRules
type EntityAbacRules struct {
	// Id
	ID *string `json:"id,omitempty"`
	// AccountId
	AccountID string `json:"accountId"`
	// EntityType
	EntityType AbacEntityValues `json:"entityType"`
	// Teams
	Teams []string `json:"teams"`
	// Tags
	Tags []*string `json:"tags,omitempty"`
	// Actions
	Actions []AbacActionNames `json:"actions"`
	// Attributes
	Attributes []*AbacAttribute `json:"attributes"`
}

// Mutation root
type Mutation struct {
}

// Query root
type Query struct {
}

// UpdateRuleInput
type UpdateAbacRuleInput struct {
	// _id
	ID string `json:"id"`
	// AccountId
	AccountID string `json:"accountId"`
	// EntityType
	EntityType AbacEntityValues `json:"entityType"`
	// Teams
	Teams []string `json:"teams"`
	// Actions
	Actions []string `json:"actions"`
	// Tags
	Tags []*string `json:"tags,omitempty"`
	// Attributes
	Attributes []*AbacAttributeInput `json:"attributes,omitempty"`
}

// AbacActionNames
type AbacActionNames string

const (
	AbacActionNamesDeleteResource         AbacActionNames = "DELETE_RESOURCE"
	AbacActionNamesExecToPod              AbacActionNames = "EXEC_TO_POD"
	AbacActionNamesRefresh                AbacActionNames = "REFRESH"
	AbacActionNamesSync                   AbacActionNames = "SYNC"
	AbacActionNamesTerminateSync          AbacActionNames = "TERMINATE_SYNC"
	AbacActionNamesView                   AbacActionNames = "VIEW"
	AbacActionNamesViewPodLogs            AbacActionNames = "VIEW_POD_LOGS"
	AbacActionNamesAppRollback            AbacActionNames = "APP_ROLLBACK"
	AbacActionNamesRolloutPause           AbacActionNames = "ROLLOUT_PAUSE"
	AbacActionNamesRolloutResume          AbacActionNames = "ROLLOUT_RESUME"
	AbacActionNamesRolloutPromoteFull     AbacActionNames = "ROLLOUT_PROMOTE_FULL"
	AbacActionNamesRolloutSkipCurrentStep AbacActionNames = "ROLLOUT_SKIP_CURRENT_STEP"
	AbacActionNamesAccessArtifacts        AbacActionNames = "ACCESS_ARTIFACTS"
	AbacActionNamesAccessLogs             AbacActionNames = "ACCESS_LOGS"
	AbacActionNamesCreate                 AbacActionNames = "CREATE"
	AbacActionNamesRestart                AbacActionNames = "RESTART"
	AbacActionNamesResubmit               AbacActionNames = "RESUBMIT"
	AbacActionNamesStop                   AbacActionNames = "STOP"
	AbacActionNamesTerminate              AbacActionNames = "TERMINATE"
	AbacActionNamesTriggerPromotion       AbacActionNames = "TRIGGER_PROMOTION"
	AbacActionNamesRetryRelease           AbacActionNames = "RETRY_RELEASE"
)

var AllAbacActionNames = []AbacActionNames{
	AbacActionNamesDeleteResource,
	AbacActionNamesExecToPod,
	AbacActionNamesRefresh,
	AbacActionNamesSync,
	AbacActionNamesTerminateSync,
	AbacActionNamesView,
	AbacActionNamesViewPodLogs,
	AbacActionNamesAppRollback,
	AbacActionNamesRolloutPause,
	AbacActionNamesRolloutResume,
	AbacActionNamesRolloutPromoteFull,
	AbacActionNamesRolloutSkipCurrentStep,
	AbacActionNamesAccessArtifacts,
	AbacActionNamesAccessLogs,
	AbacActionNamesCreate,
	AbacActionNamesRestart,
	AbacActionNamesResubmit,
	AbacActionNamesStop,
	AbacActionNamesTerminate,
	AbacActionNamesTriggerPromotion,
	AbacActionNamesRetryRelease,
}

func (e AbacActionNames) IsValid() bool {
	switch e {
	case AbacActionNamesDeleteResource, AbacActionNamesExecToPod, AbacActionNamesRefresh, AbacActionNamesSync, AbacActionNamesTerminateSync, AbacActionNamesView, AbacActionNamesViewPodLogs, AbacActionNamesAppRollback, AbacActionNamesRolloutPause, AbacActionNamesRolloutResume, AbacActionNamesRolloutPromoteFull, AbacActionNamesRolloutSkipCurrentStep, AbacActionNamesAccessArtifacts, AbacActionNamesAccessLogs, AbacActionNamesCreate, AbacActionNamesRestart, AbacActionNamesResubmit, AbacActionNamesStop, AbacActionNamesTerminate, AbacActionNamesTriggerPromotion, AbacActionNamesRetryRelease:
		return true
	}
	return false
}

func (e AbacActionNames) String() string {
	return string(e)
}

func (e *AbacActionNames) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbacActionNames(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbacActionNames", str)
	}
	return nil
}

func (e AbacActionNames) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// AbacAttributeNames
type AbacAttributeNames string

const (
	AbacAttributeNamesCluster   AbacAttributeNames = "CLUSTER"
	AbacAttributeNamesGitSource AbacAttributeNames = "GIT_SOURCE"
	AbacAttributeNamesLabel     AbacAttributeNames = "LABEL"
	AbacAttributeNamesNamespace AbacAttributeNames = "NAMESPACE"
	AbacAttributeNamesRuntime   AbacAttributeNames = "RUNTIME"
)

var AllAbacAttributeNames = []AbacAttributeNames{
	AbacAttributeNamesCluster,
	AbacAttributeNamesGitSource,
	AbacAttributeNamesLabel,
	AbacAttributeNamesNamespace,
	AbacAttributeNamesRuntime,
}

func (e AbacAttributeNames) IsValid() bool {
	switch e {
	case AbacAttributeNamesCluster, AbacAttributeNamesGitSource, AbacAttributeNamesLabel, AbacAttributeNamesNamespace, AbacAttributeNamesRuntime:
		return true
	}
	return false
}

func (e AbacAttributeNames) String() string {
	return string(e)
}

func (e *AbacAttributeNames) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbacAttributeNames(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbacAttributeNames", str)
	}
	return nil
}

func (e AbacAttributeNames) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Values from AbacEntityValues enum
type AbacEntityValues string

const (
	AbacEntityValuesClusters            AbacEntityValues = "clusters"
	AbacEntityValuesExecutionContext    AbacEntityValues = "executionContext"
	AbacEntityValuesGitContexts         AbacEntityValues = "gitContexts"
	AbacEntityValuesGitopsApplications  AbacEntityValues = "gitopsApplications"
	AbacEntityValuesPromotionFlows      AbacEntityValues = "promotionFlows"
	AbacEntityValuesProducts            AbacEntityValues = "products"
	AbacEntityValuesHelmCharts          AbacEntityValues = "helmCharts"
	AbacEntityValuesPipelines           AbacEntityValues = "pipelines"
	AbacEntityValuesProjects            AbacEntityValues = "projects"
	AbacEntityValuesSharedConfiguration AbacEntityValues = "sharedConfiguration"
	AbacEntityValuesWorkflows           AbacEntityValues = "workflows"
	AbacEntityValuesWorkflowTemplates   AbacEntityValues = "workflowTemplates"
)

var AllAbacEntityValues = []AbacEntityValues{
	AbacEntityValuesClusters,
	AbacEntityValuesExecutionContext,
	AbacEntityValuesGitContexts,
	AbacEntityValuesGitopsApplications,
	AbacEntityValuesPromotionFlows,
	AbacEntityValuesProducts,
	AbacEntityValuesHelmCharts,
	AbacEntityValuesPipelines,
	AbacEntityValuesProjects,
	AbacEntityValuesSharedConfiguration,
	AbacEntityValuesWorkflows,
	AbacEntityValuesWorkflowTemplates,
}

func (e AbacEntityValues) IsValid() bool {
	switch e {
	case AbacEntityValuesClusters, AbacEntityValuesExecutionContext, AbacEntityValuesGitContexts, AbacEntityValuesGitopsApplications, AbacEntityValuesPromotionFlows, AbacEntityValuesProducts, AbacEntityValuesHelmCharts, AbacEntityValuesPipelines, AbacEntityValuesProjects, AbacEntityValuesSharedConfiguration, AbacEntityValuesWorkflows, AbacEntityValuesWorkflowTemplates:
		return true
	}
	return false
}

func (e AbacEntityValues) String() string {
	return string(e)
}

func (e *AbacEntityValues) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AbacEntityValues(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AbacEntityValues", str)
	}
	return nil
}

func (e AbacEntityValues) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
